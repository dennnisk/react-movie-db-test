{"version":3,"sources":["GlobalStyle.ts","images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.ts","Context.js","components/Header/index.tsx","config.ts","images/no_image.jpg","components/HeroImage/HeroImage.styles.ts","components/HeroImage/index.tsx","components/Grid/Grid.styles.ts","components/Grid/index.tsx","components/Thumb/Thumb.styles.ts","components/Thumb/index.tsx","components/Spinner/Spinner.styles.ts","components/Spinner/index.tsx","images/search-icon.svg","components/SearchBar/SearchBar.styles.ts","components/SearchBar/index.tsx","components/Button/Button.styles.ts","components/Button/index.tsx","API.ts","helpers.ts","hooks/useHomeFetch.ts","components/Home.tsx","components/BreadCrumb/BreadCrumb.styles.ts","components/BreadCrumb/index.tsx","components/MovieInfo/MovieInfo.styles.ts","components/Rate/index.tsx","components/MovieInfo/index.tsx","components/MovieInfoBar/MovieInfoBar.styles.ts","components/MovieInfoBar/index.tsx","components/Actor/Actor.styles.ts","components/Actor/index.tsx","components/Movie.tsx","hooks/useMovieFetch.ts","components/NotFound.tsx","components/Login.styles.ts","components/Login.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Context","React","createContext","UserProvider","children","useState","undefined","state","setState","Provider","value","Header","useContext","user","console","log","to","src","RMDBLogo","alt","username","href","target","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","props","image","Text","HeroImage","title","text","Grid","header","Image","Thumb","movieId","clickable","smaller","Spinner","SearchBar","setSearchTerm","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","e","currentTarget","button","Button","callback","onClick","defaultConfig","method","headers","API","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","Rate","setValue","min","max","MovieInfo","sendingRate","setSendingRate","handleRatting","rate","className","vote_average","directors","lenth","d","name","credit_id","MovieInfoBar","budget","revenue","Actor","caracter","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","toString","useMovieFetch","useParams","runtime","length","actor","character","profile_path","NotFound","Styled","Login","setUsername","setPassword","setUser","navigate","useNavigate","handleSubmit","session_id","handleInput","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5426fde5.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    --maxWidth: 1280px; \r\n    --white: #fff;\r\n    --lightGrey: #eee;\r\n    --medGrey: #353535; \r\n    --darkGrey: #1c1c1c;\r\n    --fontSuperBig: 2.5rem;\r\n    --fontBig: 1.5rem;\r\n    --fontMed: 1.2rem;\r\n    --fontSmall: 1rem;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Abel', sans-serif;  \r\n  }\r\n\r\n  body {  \r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n\r\n    h1 {\r\n      font-size: 2rem;\r\n      font-weight: 600;\r\n      color: var(--white);\r\n    }\r\n\r\n    h3 {\r\n      font-size: 1.1rem;\r\n      font-weight: 600;\r\n    }\r\n\r\n    p {\r\n      font-size: 1rem;\r\n      color: var(--white);\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/react-movie-logo.35f4d399.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.e7029961.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  max-width: var(--maxWidth);\r\n  padding: 20px 0;\r\n  margin: 0 auto;\r\n  color: var(--white);\r\n\r\n  a {\r\n    color: var(--white);\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n  width: 200px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n  width: 100px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    width: 80px;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\n\r\nexport const Context = React.createContext();\r\n\r\nconst UserProvider = ({children}) => {\r\n  const [state, setState] = useState(undefined);\r\n\r\n  return (\r\n    <Context.Provider value={[state, setState]} >{children}</Context.Provider>\r\n  )\r\n}\r\n\r\nexport default UserProvider;","import React, { useContext } from 'react';\r\nimport {Link } from 'react-router-dom'\r\nimport RMDBLogo from '../../images/react-movie-logo.svg';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\n\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\r\nimport { Context } from '../../Context';\r\n\r\nconst Header: React.FC = () => {\r\n\r\n  const [user] = useContext(Context);\r\n\r\n  console.log(user);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Content>\r\n        <Link to=\"/\">\r\n          <LogoImg src={RMDBLogo} alt='rmdb-logo' />\r\n        </Link>\r\n        {\r\n          user ? (\r\n            <span> Welcome {user.username}</span>\r\n          ) : (\r\n            <Link to='/login'>\r\n              <span>Log In</span>\r\n            </Link>\r\n          )\r\n        }\r\n        <a href=\"https://www.themoviedb.org/\" target=\"_blank\">\r\n          <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' />\r\n        </a>\r\n      </Content>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\n","// Configuration for TMDB API\r\n// Read more about the API here: https://developers.themoviedb.org/\r\n\r\nconst API_URL:string = 'https://api.themoviedb.org/3/';\r\nconst API_KEY:string|undefined = process.env.REACT_APP_API_KEY;\r\n\r\nconst SEARCH_BASE_URL:string = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\r\nconst POPULAR_BASE_URL:string = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\r\n// For login and voting\r\nconst REQUEST_TOKEN_URL:string = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\r\nconst LOGIN_URL:string = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\r\nconst SESSION_ID_URL:string = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\r\n\r\nconst IMAGE_BASE_URL:string = 'http://image.tmdb.org/t/p/';\r\n// Sizes: w300, w780, w1280, original\r\nconst BACKDROP_SIZE:string = 'w1280';\r\n// w92, w154, w185, w342, w500, w780, original\r\nconst POSTER_SIZE:string = 'w780';\r\n\r\nexport {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  IMAGE_BASE_URL,\r\n  BACKDROP_SIZE,\r\n  POSTER_SIZE,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL,\r\n};\r\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import styled from 'styled-components';\r\n\r\ntype Props = {\r\n  image: string;\r\n}\r\n\r\nexport const Wrapper = styled.div<Props>`\r\n  background: ${(props) =>\r\n    `linear-gradient(\r\n      to bottom, rgba(0,0,0,0)\r\n      30%,rgba(0,0,0,0)\r\n      45%,rgba(0,0,0,0.65)\r\n      80%\r\n    ),\r\n    url('${props.image}'), var(--darkGrey)`};\r\n  background-size: 100%, cover;\r\n  background-position: center;\r\n  height: 600px;\r\n  position: relative;\r\n  animation: animateHeroimage 1s;\r\n\r\n  @keyframes animateHeroimage {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 20px;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  z-index: 100;\r\n  max-width: 700px;\r\n  position: absolute;\r\n  bottom: 40px;\r\n  margin-right: 20px;\r\n  min-height: 100px;\r\n  color: var(--white);\r\n\r\n  h1 {\r\n    font-size: var(--fontSuperBig);\r\n\r\n    @media screen and (max-width: 720px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n\r\n  p {\r\n    font-size: var(--fontMed);\r\n  \r\n    @media screen and (max-width: 720px) {\r\n      font-size: var(--fontSmall);\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 720px) {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport {Wrapper, Content, Text } from './HeroImage.styles';\r\n\r\ntype Props = {\r\n  image: string;\r\n  title: string;\r\n  text: string;\r\n}\r\n\r\nconst HeroImage : React.FC<Props> = ({image, title, text}) => {\r\n  return (\r\n    <Wrapper image={image}>\r\n      <Content>\r\n        <Text>\r\n          <h1>{title}</h1>\r\n          <p>{text}</p>\r\n        </Text>\r\n      </Content>\r\n\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default HeroImage;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n\r\n  h1 {\r\n    color: var(--medGrey);\r\n  }\r\n\r\n  h1 {\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  grid-gap: 2rem;\r\n`;\r\n","import React from 'react';\r\nimport { Wrapper, Content} from './Grid.styles'\r\n\r\ntype Props = {\r\n  header: string\r\n}\r\n\r\nconst Grid: React.FC<Props> = ({header, children}) => (\r\n  <Wrapper>\r\n    <h1>{header}</h1>\r\n    <Content>{children}</Content>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Grid;","import styled from 'styled-components';\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  max-width: 720px;\r\n  transition: all 0.3s;\r\n  object-fit: cover;\r\n  border-radius: 20px;\r\n  animation: animateMovieThumb 0.5s;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  @keyframes animateMovieThumb {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport {Link } from 'react-router-dom'\r\nimport {Image} from './Thumb.styles'\r\n\r\ntype Props = {\r\n  image: string;\r\n  movieId?: number;\r\n  clickable: boolean;\r\n}\r\n\r\nconst Thumb: React.FC<Props> = ( { image, movieId, clickable } ) => {\r\n\r\n  return (\r\n    <div>\r\n      {clickable ? (\r\n        <Link to={`/${movieId}`}>\r\n          <Image src={image} alt='movie-thumb' />\r\n        </Link>\r\n      ) : (\r\n        <Image src={image} alt='movie-thumb' />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Thumb;","import styled from 'styled-components';\r\n\r\ntype Props = {\r\n  smaller?: boolean\r\n}\r\n\r\nexport const Wrapper = styled.div<Props>`\r\n  border: ${(props) => props.smaller ? '2px': '5px'} solid var(--lightGrey); \r\n  border-top: ${(props) => props.smaller ? '2px': '5px'} solid var(--medGrey);\r\n  border-radius: 50%;\r\n  ${(props) => props.smaller \r\n    ? 'width: 20px; height: 20px;' \r\n    : 'width: 50px; height: 50px;'};\r\n  animation: spin 0.8s linear infinite;\r\n  margin: 20px ${(props) => props.smaller ? '': 'auto'};\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import {Wrapper} from './Spinner.styles';\r\n\r\ntype Props = {\r\n  smaller?: boolean\r\n}\r\n\r\nconst Spinner: React.FC<Props> = ({smaller}) => {\r\n  return (\r\n    <Wrapper smaller={smaller}></Wrapper>\r\n  )\r\n};\r\n\r\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/search-icon.bb4c697f.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100px;\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  position: relative;\r\n  max-width: var(--maxWidth);\r\n  width: 100%;\r\n  height: 55px;\r\n  background: var(--medGrey);\r\n  margin: 0 auto;\r\n  border-radius: 40px;\r\n  color: var(--white);\r\n\r\n  img {\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 14px;\r\n    width: 30px;\r\n  }\r\n\r\n  input {\r\n    font-size: 28px;\r\n    position: absolute;\r\n    left: 0px;\r\n    margin: 8px 0;\r\n    padding: 0 0 0 60px;\r\n    border: 0;\r\n    width: 95%;\r\n    background: transparent;\r\n    height: 40px;\r\n    color: var(--white);\r\n\r\n    :focus {\r\n      outline: none;\r\n    }\r\n\r\n    @media screen and (max-width: 720px) {\r\n      font-size: 28px;\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport searchIcon from '../../images/search-icon.svg'\r\n\r\nimport  {Wrapper, Content} from './SearchBar.styles'\r\n\r\ntype Props = {\r\n  setSearchTerm: React.Dispatch<React.SetStateAction<string>>\r\n}\r\n\r\nconst SearchBar : React.FC <Props> = ( { setSearchTerm } ) => {\r\n\r\n  const [state, setState] = useState(\"\");\r\n\r\n  const initial = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (initial.current) {\r\n      initial.current = false;\r\n    }\r\n\r\n    const timer = setTimeout(() => {\r\n      setSearchTerm(state);\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [setSearchTerm, state])\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Content>\r\n        <img src={searchIcon} alt='search-icon' />\r\n        <input\r\n          type=\"text\"\r\n          placeholder='Search a movie'\r\n          onChange={e => setState(e.currentTarget.value)}\r\n          value={state}\r\n          />\r\n      </Content>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default SearchBar;\r\n\r\n","\r\nimport styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.button`\r\n  display: block;\r\n  background: var(--darkGrey);\r\n  width: 25%;\r\n  min-width: 200px;\r\n  height: 60px;\r\n  border-radius: 30px;\r\n  color: var(--white);\r\n  border: 0;\r\n  font-size: var(--fontBig);\r\n  margin: 20px auto;\r\n  transition: all 0.3s;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport { Wrapper} from './Button.styles'\r\n// types\r\ntype props = {\r\n  text: string;\r\n  callback: () => void;\r\n}\r\n\r\nconst Button: React.FC<props> = ({text, callback}) => {\r\n\r\n  return (\r\n    <Wrapper type=\"button\" onClick={callback}>\r\n      {text}\r\n    </Wrapper>\r\n  )\r\n\r\n};\r\n\r\n\r\nexport default Button;\r\n\r\n\r\n","import {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL\r\n} from './config';\r\n\r\nconst defaultConfig = {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\nexport type Movie = {\r\n  backdrop_path: string;\r\n  id: number;\r\n  original_title: string;\r\n  overview: string;\r\n  popularity: number;\r\n  poster_path: string;\r\n  title: string;\r\n  vote_average: number;\r\n  vote_count: number;\r\n  budget: number;\r\n  runtime: number;\r\n  revenue: number;\r\n};\r\n\r\nexport type Movies = {\r\n  page: number;\r\n  results: Movie[];\r\n  total_pages: number;\r\n  total_results: number;\r\n};\r\n\r\nexport type Cast = {\r\n  character: string;\r\n  credit_id: string;\r\n  name: string;\r\n  profile_path: string;\r\n};\r\n\r\nexport type Crew = {\r\n  job: string;\r\n  name: string;\r\n  credit_id: number;\r\n};\r\n\r\nexport type Credits = {\r\n  id: number;\r\n  cast: Cast[];\r\n  crew: Crew[];\r\n};\r\n\r\nconst API = {\r\n  fetchMovies: async (searchTerm: string, page: number): Promise<Movies> => {\r\n    const endpoint: string = searchTerm\r\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\r\n      : `${POPULAR_BASE_URL}&page=${page}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchMovie: async (movieId: string): Promise<Movie> => {\r\n    const endpoint: string = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchCredits: async (movieId: string): Promise<Credits> => {\r\n    const creditsEndpoint: string = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n    return await (await fetch(creditsEndpoint)).json();\r\n  },\r\n  // Bonus material below for login\r\n  getRequestToken: async () => {\r\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\r\n    return reqToken.request_token;\r\n  },\r\n  authenticate: async (\r\n    requestToken: string,\r\n    username: string,\r\n    password: string\r\n  ) => {\r\n    const bodyData = {\r\n      username,\r\n      password,\r\n      request_token: requestToken\r\n    };\r\n    // First authenticate the requestToken\r\n    const data = await (\r\n      await fetch(LOGIN_URL, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify(bodyData)\r\n      })\r\n    ).json();\r\n    // Then get the sessionId with the requestToken\r\n    if (data.success) {\r\n      const sessionId = await (\r\n        await fetch(SESSION_ID_URL, {\r\n          ...defaultConfig,\r\n          body: JSON.stringify({ request_token: requestToken })\r\n        })\r\n      ).json();\r\n      return sessionId;\r\n    }\r\n  },\r\n  rateMovie: async (sessionId: any, movieId: any , value: any) => {\r\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\r\n\r\n    const rating = await (\r\n      await fetch(endpoint, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify({ value })\r\n      })\r\n    ).json();\r\n\r\n    return rating;\r\n  }\r\n};\r\n\r\nexport default API;","// Convert time to hours and minutes\r\nexport const calcTime = (time:number): string => {\r\n  const hours:number = Math.floor(time / 60);\r\n  const mins:number = time % 60;\r\n  return `${hours}h ${mins}m`;\r\n};\r\n// Convert a number to money formatting\r\nexport const convertMoney = (money:number): string => {\r\n  const formatter: Intl.NumberFormat = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0,\r\n  });\r\n  return formatter.format(money);\r\n};\r\n\r\n// Return session storage\r\nexport const isPersistedState = (stateName: string): any => {\r\n  const sessionState = sessionStorage.getItem(stateName);\r\n  return sessionState && JSON.parse(sessionState);\r\n}","// eslint-disable-next-line\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport API, {Movie} from '../API'\r\n// helper\r\nimport {isPersistedState} from '../helpers';\r\n\r\nconst initialState = {\r\n  page: 0,\r\n  results: [] as Movie[],\r\n  total_pages: 0,\r\n  total_results: 0\r\n};\r\n\r\n\r\nexport const useHomeFetch = () => {\r\n    // eslint-disable-next-line\r\n    const [ searchTerm, setSearchTerm ] = useState('');\r\n    // eslint-disable-next-line\r\n    const [ state, setState ] = useState(initialState);\r\n    // eslint-disable-next-line\r\n    const [ loading, setLoading ] = useState(false);\r\n    // eslint-disable-next-line\r\n    const [ error, setError ] = useState(false);\r\n\r\n    const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n    \r\n    //console.log(searchTerm);\r\n\r\n    const fetchMovies = async (page: number, searchTerm = \"\") => {\r\n      try {\r\n        setError(false);\r\n        setLoading(true);\r\n  \r\n        const movies = await API.fetchMovies(searchTerm, page);\r\n  \r\n        console.log(movies);\r\n  \r\n        setState(prev => ({\r\n          ...movies, \r\n          results:\r\n            page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\r\n        }));\r\n        \r\n      } catch (error) {\r\n        setError(true);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  \r\n    // Run at the start of the component\r\n    useEffect(() => {\r\n      // If not searching (will we not store), load the data feched before\r\n      if (!searchTerm) {\r\n        // Load from sessionStorage\r\n        const sessionState = isPersistedState('homeState');\r\n        // if Exists\r\n        if (sessionState) {\r\n          console.log('Loading from sessionStorage')\r\n          // Save to the state, to show the data that whore loaded before\r\n          setState(sessionState);\r\n          return;\r\n        }\r\n      }\r\n      setState(initialState);\r\n      fetchMovies(1, searchTerm);\r\n    }, [searchTerm]);\r\n\r\n    // Load More\r\n    useEffect(() => {\r\n      if (!isLoadingMore) return;\r\n      \r\n      fetchMovies(state.page+1, searchTerm);\r\n      setIsLoadingMore(false);\r\n      \r\n    }, [isLoadingMore, state.page, searchTerm]);\r\n    \r\n    // write the sessionStorage\r\n    useEffect(() => {\r\n      if (!searchTerm) {\r\n        sessionStorage.setItem('homeState', JSON.stringify(state));\r\n      }\r\n    }, [searchTerm, state]);\r\n    \r\n\r\n\r\n    return { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore };\r\n  \r\n}","// eslint-disable-next-line\r\nimport React, { useState, useEffect } from 'react';\r\n// eslint-disable-next-line\r\nimport API from '../API'\r\n// eslint-disable-next-line\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config'\r\n// eslint-disable-next-line\r\nimport NoImage from '../images/no_image.jpg'\r\n\r\nimport HeroImage from './HeroImage'; \r\nimport Grid from './Grid'\r\nimport Thumb from './Thumb'\r\nimport Spinner from './Spinner'; \r\nimport SearchBar from './SearchBar'; \r\nimport Button from './Button'; \r\n\r\nimport {useHomeFetch} from '../hooks/useHomeFetch'\r\n\r\nconst Home: React.FC = () => {\r\n\r\n  // eslint-disable-next-line\r\n  const { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore } = useHomeFetch();\r\n\r\n  if (error) return <div>Something went wrong</div>\r\n\r\n  return (\r\n    <div> \r\n      {!searchTerm && state.results[0] ?\r\n        <HeroImage \r\n          image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n          title={state.results[0].original_title}\r\n          text={state.results[0].overview}\r\n        />\r\n        : null\r\n      } \r\n      <SearchBar setSearchTerm={setSearchTerm}></SearchBar>\r\n      <Grid header={searchTerm ? 'Search Result' : 'Popular Movies'}>\r\n        {state.results.map(movie => (\r\n          <Thumb \r\n            key={movie.id}\r\n            clickable\r\n            image={\r\n              movie.poster_path ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path : NoImage\r\n            }\r\n            movieId={movie.id}\r\n            ></Thumb>\r\n        ))}\r\n        \r\n      </Grid>\r\n      {loading && <Spinner /> }\r\n      {\r\n        state.page < state.total_pages && !loading && (\r\n          <Button text='Load More' callback={() => setIsLoadingMore(true)}/>     \r\n        ) \r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 70px;\r\n  background: var(--medGrey);\r\n  color: var(--white);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: var(--maxWidth);\r\n  padding: 0 20px;\r\n\r\n  span {\r\n    font-size: 1.2rem;\r\n    color: var(--white);\r\n    padding-right: 10px;\r\n\r\n    @media screen and (max-width: 768px) {\r\n      font-size: 16px;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport {Link } from 'react-router-dom'\r\n\r\nimport {Wrapper, Content} from './BreadCrumb.styles'\r\n\r\ntype Props = {\r\n  movieTitle: String;\r\n}\r\n\r\nconst BreadCrumb:React.FC<Props> = ({movieTitle}) => {\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Content>\r\n        <Link to=\"/\">\r\n          <span>Home</span>\r\n        </Link>\r\n        <span>|</span>\r\n        <span>{movieTitle}</span>\r\n      </Content>\r\n    </Wrapper>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default BreadCrumb;","import styled from 'styled-components';\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\r\n\r\ntype Props = {\r\n  backdrop: string;\r\n}\r\n\r\nexport const Wrapper = styled.div<Props>`\r\n  background: ${(props) =>\r\n    props.backdrop\r\n      ? `url('${IMAGE_BASE_URL}${BACKDROP_SIZE}${props.backdrop}')`\r\n      : '#000'};\r\n  background-size: cover;\r\n  background-position: center;\r\n  padding: 40px 20px;\r\n  animation: animateMovieinfo 1s;\r\n\r\n  @keyframes animateMovieinfo {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: 1280px;\r\n\r\n  margin: 0 auto;\r\n  background: rgb(0, 0, 0, 0.7);\r\n  border-radius: 20px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    max-height: none;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  width: 100%;\r\n  padding: 20px 40px;\r\n  color: var(--white);\r\n  overflow: hidden;\r\n\r\n  .rating-directors {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  .score {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 35px;\r\n    height: 35px;\r\n    background: #fff;\r\n    color: #000;\r\n    font-weight: 800;\r\n    border-radius: 25px;\r\n    margin: 50px 0 0 -40px;\r\n  }\r\n\r\n  .director {\r\n    margin: 0 0 0 40px;\r\n\r\n    p {\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  .rate {\r\n    margin: 40px 0 0 0px;\r\n\r\n    p {\r\n      margin: 0;\r\n    }\r\n\r\n    button {\r\n      display: block;\r\n      background: var(--white);\r\n      width: 25%;\r\n      min-width: 100px;\r\n      max-width: 100px;\r\n      height: 30px;\r\n      border-radius: 10px;\r\n      color: var(--darkGrey);\r\n      border: 0;\r\n      font-size: var(--fontSmall);\r\n      margin: 25px 0 0 30px;\r\n      transition: all 0.3s;\r\n      outline: none;\r\n      cursor: pointer;\r\n\r\n      :hover {\r\n        opacity: 0.8;\r\n      }\r\n    }\r\n\r\n    input {\r\n      margin: 0 25px 0 30px;\r\n      width: 35%;\r\n    }\r\n  }\r\n\r\n  h1 {\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n","import React, { useState} from 'react';\r\n\r\ntype Props = {\r\n  callback: (value: number) => void;\r\n};\r\n\r\nconst Rate: React.FC<Props> = ({callback}) => {\r\n\r\n  const [value, setValue] = useState(5);\r\n\r\n  return (\r\n    <div>\r\n      <input type='range'\r\n        min='1'\r\n        max='10'\r\n        value={value}\r\n        //@ts-ignore\r\n        onChange={(e) => setValue(e.currentTarget.value)}\r\n        />\r\n      {value} Stars!\r\n      <>\r\n        <button onClick={()=>callback(value)}>Send rate</button>\r\n      </>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Rate;\r\n","import React, {useContext} from 'react';\r\nimport {Wrapper, Content, Text} from './MovieInfo.styles'\r\n\r\nimport Thumb from '../Thumb';\r\nimport Spinner from '../Spinner';\r\nimport Rate from '../Rate';\r\n\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\r\n\r\nimport NoImage from '../../images/no_image.jpg';\r\n\r\nimport {MovieState} from '../../hooks/useMovieFetch';\r\nimport {Context} from '../../Context';\r\nimport API from '../../API';\r\nimport { useState } from 'react';\r\n\r\ntype Props = {\r\n  movie: MovieState\r\n}\r\n\r\nconst MovieInfo: React.FC<Props> = ({movie}) => {\r\n\r\n  const [user] = useContext(Context);\r\n  const [sendingRate, setSendingRate] = useState(false);\r\n\r\n  console.log('userData:', user);\r\n\r\n  const handleRatting = async (value: any) => {\r\n    try {\r\n      setSendingRate(true);\r\n      const rate = await API.rateMovie(user.sessionId, movie.id, value);\r\n      console.log('rate:', rate);\r\n      \r\n    } finally {\r\n      setSendingRate(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper backdrop={movie.backdrop_path}>\r\n      <Content>\r\n        <Thumb\r\n          image={\r\n            movie.poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}` : NoImage\r\n          }\r\n          clickable={false}\r\n          />\r\n          <Text>\r\n            <h1>{movie.title}</h1>\r\n            <h3>PLOT</h3>\r\n            <p>{movie.overview}</p>\r\n\r\n            <div className=\"rating-directors\">\r\n              <h3>RATING</h3>\r\n              <div className=\"score\">\r\n                {movie.vote_average}\r\n              </div>\r\n\r\n              {console.log(movie)}\r\n              <div className=\"director\">\r\n                \r\n                <h3>DIRECTOR {\r\n                //@ts-ignore\r\n                (movie && movie.directors && (movie.directors.lenth) > 1) ? 'S': '' \r\n                \r\n                }</h3>\r\n                {\r\n                  (movie && movie.directors) ?\r\n                    movie.directors.map(d => (\r\n                      <p key={d.credit_id}>{d.name}</p>\r\n                    ))\r\n                  : <Spinner />\r\n                }\r\n              </div>\r\n            </div>\r\n            {\r\n                user && \r\n                <div className=\"rate\">\r\n                  <h3>\r\n                    RATE MOVIE\r\n                  </h3>\r\n                  {sendingRate ? (\r\n                    <div><Spinner smaller={true}></Spinner> Enviando...</div>\r\n                  ) : (\r\n                    <Rate callback={handleRatting} />\r\n                  )}\r\n\r\n                </div>\r\n              }            \r\n          </Text>\r\n      </Content>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default MovieInfo;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  min-height: 100px;\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: var(--maxWidth);\r\n  width: 100%;\r\n  margin: 0 auto;\r\n\r\n  .column {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: var(--medGrey);\r\n    border-radius: 20px;\r\n    margin: 0 20px;\r\n    flex: 1;\r\n\r\n    :first-child {\r\n      margin-left: 0;\r\n    }\r\n\r\n    :last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n\r\n    .column {\r\n      margin: 20px 0;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n// helpers\r\nimport {calcTime, convertMoney} from '../../helpers'\r\n\r\nimport {Wrapper, Content} from './MovieInfoBar.styles'\r\n\r\ntype Props = {\r\n  time: number;\r\n  budget: number;\r\n  revenue: number;\r\n}\r\n\r\nconst MovieInfoBar: React.FC<Props> = ({time, budget, revenue}) => {\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Content>\r\n        <div className=\"column\">\r\n          <p> Running time: {calcTime(time)}  </p>\r\n        </div>\r\n        <div className=\"column\">\r\n          <p> Budget: {convertMoney(budget)}  </p>\r\n        </div>\r\n        <div className=\"column\">\r\n          <p> Revenue: {convertMoney(revenue)}  </p>\r\n        </div>\r\n      </Content>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default MovieInfoBar;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  color: var(--white);\r\n  background: var(--darkGrey);\r\n  border-radius: 20px;\r\n  padding: 5px;\r\n  text-align: center;\r\n\r\n  h3 {\r\n    margin: 10px 0 0 0;\r\n  }\r\n\r\n  p {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  display: block;\r\n  width: 100%;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  border-radius: 15px;\r\n`;\r\n","import React from 'react';\r\nimport {Wrapper, Image} from './Actor.styles'\r\n\r\ntype Props = {\r\n  name: string;\r\n  caracter: string;\r\n  imageUrl: string;\r\n}\r\n\r\nconst Actor: React.FC<Props> = ({name, caracter, imageUrl}) => {\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Image src={imageUrl} alt='actor-thumb' />\r\n      <h3>{name}</h3>\r\n      <p>{caracter}</p>\r\n    </Wrapper>\r\n  )\r\n\r\n}\r\n\r\nexport default Actor;","import React from 'react';\r\n// eslint-disable-next-line\r\nimport { useParams } from 'react-router-dom'\r\n// config\r\n// eslint-disable-next-line\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config'\r\n// components\r\nimport BreadCrumb from './BreadCrumb';\r\n// eslint-disable-next-line\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport MovieInfo from './MovieInfo';\r\nimport MovieInfoBar from './MovieInfoBar';\r\nimport Actor from './Actor'; \r\n\r\n// hooks\r\nimport { useMovieFetch } from '../hooks/useMovieFetch'\r\n// image\r\n// eslint-disable-next-line\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\nconst Movie : React.FC = () => {\r\n\r\n  const { movieId } = useParams();\r\n\r\n  const { state: movie, loading, error } = useMovieFetch(movieId);\r\n\r\n  if (loading) return <Spinner></Spinner>\r\n  if (error) return <div>Somenthing went wrong</div>\r\n\r\n  return (\r\n    <div>\r\n      <BreadCrumb movieTitle={movie.original_title}></BreadCrumb>\r\n      <MovieInfo movie={movie}></MovieInfo>\r\n      <MovieInfoBar time={movie.runtime} budget={movie.budget} revenue={movie.revenue} />\r\n      <Grid header=\"Actors\">\r\n        {\r\n         (movie && movie.actors && movie.actors.length > 0) ?\r\n            movie.actors.map(actor => (\r\n              <Actor \r\n                key={actor.credit_id}\r\n                name={actor.name}\r\n                caracter={actor.character}\r\n                imageUrl={actor.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}` : NoImage}\r\n              />\r\n            ))\r\n          : <Spinner />\r\n                  \r\n        }\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Movie;\r\n","import { useState, useEffect } from 'react';\r\nimport API, { Movie, Cast, Crew } from '../API';\r\n// Helpers\r\nimport { isPersistedState } from '../helpers';\r\n// Types\r\nexport type MovieState = Movie & { actors: Cast[]; directors: Crew[] };\r\n\r\nexport const useMovieFetch = (movieId: string) => {\r\n  const [state, setState] = useState<MovieState>({} as MovieState);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMovie = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        const movie = await API.fetchMovie(movieId);\r\n        const credits = await API.fetchCredits(movieId);\r\n        // Get directors only\r\n        const directors = credits.crew.filter(\r\n          member => member.job === 'Director'\r\n        );\r\n\r\n        setState({\r\n          ...movie,\r\n          actors: credits.cast,\r\n          directors\r\n        });\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n    };\r\n\r\n    const sessionState = isPersistedState(movieId.toString());\r\n\r\n    if (sessionState) {\r\n      setState(sessionState);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    fetchMovie();\r\n  }, [movieId]);\r\n\r\n  // Write to sessionStorage\r\n  useEffect(() => {\r\n    sessionStorage.setItem(movieId.toString(), JSON.stringify(state));\r\n  }, [movieId, state]);\r\n\r\n  return { state, loading, error };\r\n};\r\n","import React from 'react';\r\n\r\n\r\nconst NotFound: React.FC = () => {\r\n  return (\r\n    <div>NotFound</div>\r\n  )\r\n}\r\n\r\n\r\nexport default NotFound;","import Styled from \"styled-components\";\r\n\r\nexport const Wrapper = Styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  max-width: 400px;\r\n  padding: 15px;\r\n  color: var(--darkGrey);\r\n\r\n  input {\r\n    width: 100%;\r\n    height: 30px;\r\n    border: 1px solid var(--darkGrey);\r\n    border-radius: 20px;\r\n    margin: 10px 0;\r\n    padding: 10px;\r\n  }\r\n\r\n  .error {\r\n    color: red;\r\n  }\r\n\r\n  h3 {\r\n    width: 100%;\r\n    padding: 20px 40px;\r\n    color: var(--darkGrey);\r\n    overflow: hidden;\r\n\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n\r\n    a {\r\n      color: var(--darkGrey);\r\n      text-decoration: none;\r\n    }\r\n  }\r\n`;","import React, {useState, useContext} from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport API from '../API';\r\n\r\n// componentes\r\nimport Button from './Button';\r\n//\r\nimport {Wrapper} from './Login.styles'\r\n\r\nimport { Context } from '../Context';\r\n\r\n\r\nconst Login: React.FC = () => {\r\n\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n  //@ts-ignore\r\n  // eslint-disable-next-line\r\n  const [user, setUser] = useContext(Context);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async () => {\r\n    setError(false);\r\n    try {\r\n      const requestToken = await API.getRequestToken();\r\n      const sessionId = await API.authenticate(requestToken, username, password);\r\n\r\n      console.log(sessionId);\r\n      setUser({\r\n        sessionId: sessionId.session_id, \r\n        username: username\r\n      });\r\n\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error(error);\r\n      setError(true);\r\n    }\r\n  }\r\n\r\n  const handleInput = (e: any) => {\r\n    const name = e?.currentTarget?.name ;\r\n    const value = e?.currentTarget?.value;\r\n    if (name === 'username') setUsername(value);\r\n    if (name === 'password') setPassword(value);\r\n    console.log('campo>: ', name, value);\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      {error && <div className=\"error\">There was an Error on the login</div>}\r\n      <h3>Login into<a href=\"https://www.themoviedb.org/\">The Movie DB</a></h3>\r\n      <label>Username:</label>\r\n      <input\r\n        type=\"text\"\r\n        value={username}\r\n        name=\"username\"\r\n        onChange={handleInput}\r\n        ></input>\r\n      <input\r\n        type=\"password\"\r\n        value={password}\r\n        name=\"password\"\r\n        onChange={handleInput}\r\n        ></input>\r\n        <Button text='Login' callback={handleSubmit} />\r\n    </Wrapper>\r\n  )\r\n\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\n// @ts-ignore\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom'\r\nimport { GlobalStyle } from './GlobalStyle';\r\n\r\nimport Header from './components/Header';\r\nimport Home from './components/Home'\r\nimport Movie from './components/Movie';\r\nimport NotFound from './components/NotFound';\r\nimport Context from './Context';\r\nimport Login from './components/Login';\r\n\r\nconst App: React.FC = () => (\r\n  <BrowserRouter>\r\n    <Context>\r\n      <Header />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />}/>\r\n        <Route path=\"/login\" element={<Login />}/>\r\n        <Route path=\"/:movieId\" element={<Movie />}/>\r\n        <Route path=\"/*\" element={<NotFound />}/>\r\n      </Routes>\r\n      <GlobalStyle />\r\n    </Context>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}